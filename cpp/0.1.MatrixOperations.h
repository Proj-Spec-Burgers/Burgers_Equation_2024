#pragma once

class MatrixCopy
{
public:
	MatrixCopy(const size_t M, const std::vector<std::vector<double>>& mat_from, std::vector<std::vector<double>>& mat_to);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class VectorCopy
{
public:
	VectorCopy(const size_t M, const std::vector<double>& vec_from, std::vector<double>& vec_to);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class MatrixMatrixMultiply
{
public:
	MatrixMatrixMultiply(const size_t M, const std::vector<std::vector<double>>& mat_mult_0, const std::vector<std::vector<double>>& mat_mult_1, std::vector<std::vector<double>>& mat_result);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class MatrixVectorMultiply
{
public:
	MatrixVectorMultiply(const size_t M, const std::vector<std::vector<double>>& mat_mult_0, const std::vector<double>& vec_mult_0, std::vector<double>& vec_result);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class MatrixRowSwap
{
public:
	MatrixRowSwap(const size_t M, const size_t row_0, const size_t row_1, std::vector<std::vector<double>>& mat);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class VectorRowSwap
{
public:
	VectorRowSwap(const size_t M, const size_t row_0, const size_t row_1, std::vector<double>& vec);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class VectorPrint
{
public:
	VectorPrint(const size_t M, const std::vector<double>& vec);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class MatrixPrint
{
public:
	MatrixPrint(const size_t M, const std::vector<std::vector<double>>& mat);
};